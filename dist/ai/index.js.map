{"version":3,"file":"index.js","sources":["../../src/ai/index.js"],"sourcesContent":["/**\n * aartisan - AI Integration\n * \n * Provides integration with AI models for component analysis\n * and enhancement.\n */\n\n// Export the component analysis functionality\nexport { analyzeComponents } from './analyze.js';\n\n/**\n * AI providers status - placeholders for now\n */\nexport const aiProviders = {\n  gemini: {\n    name: 'Gemini',\n    available: false,\n    capabilities: ['component-analysis', 'metadata-generation']\n  },\n  cohere: {\n    name: 'Cohere',\n    available: false,\n    capabilities: ['component-analysis', 'metadata-generation']\n  }\n};\n\n/**\n * Initializes the AI providers with API keys\n * @param {Object} options - Initialization options\n * @param {string} options.geminiApiKey - Gemini API key\n * @param {string} options.cohereApiKey - Cohere API key\n * @returns {Promise<Object>} Initialized providers\n */\nexport async function initializeProviders(options = {}) {\n  // This is a placeholder implementation\n  // In a real implementation, this would initialize the API clients\n  \n  return {\n    gemini: options.geminiApiKey ? {\n      name: 'Gemini',\n      available: true,\n      capabilities: ['component-analysis', 'metadata-generation']\n    } : aiProviders.gemini,\n    \n    cohere: options.cohereApiKey ? {\n      name: 'Cohere',\n      available: true,\n      capabilities: ['component-analysis', 'metadata-generation']\n    } : aiProviders.cohere\n  };\n}\n\n/**\n * Gets the best available AI provider\n * @returns {Object|null} Best available provider or null\n */\nexport function getBestProvider() {\n  if (aiProviders.gemini.available) {\n    return {\n      id: 'gemini',\n      ...aiProviders.gemini\n    };\n  }\n  \n  if (aiProviders.cohere.available) {\n    return {\n      id: 'cohere',\n      ...aiProviders.cohere\n    };\n  }\n  \n  return null;\n}\n\n/**\n * Checks if AI integration is available\n * @returns {boolean} Whether AI integration is available\n */\nexport function isAIAvailable() {\n  return aiProviders.gemini.available || aiProviders.cohere.available;\n}"],"names":["aiProviders","gemini","name","available","capabilities","cohere","initializeProviders","options","geminiApiKey","cohereApiKey","getBestProvider","id","isAIAvailable"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAKA;AACA;AACA;AACO,MAAMA,WAAW,GAAG;AACzBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAE,QAAQ;AACdC,IAAAA,SAAS,EAAE,KAAK;AAChBC,IAAAA,YAAY,EAAE,CAAC,oBAAoB,EAAE,qBAAqB;GAC3D;AACDC,EAAAA,MAAM,EAAE;AACNH,IAAAA,IAAI,EAAE,QAAQ;AACdC,IAAAA,SAAS,EAAE,KAAK;AAChBC,IAAAA,YAAY,EAAE,CAAC,oBAAoB,EAAE,qBAAqB;AAC5D;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeE,mBAAmBA,CAACC,OAAO,GAAG,EAAE,EAAE;AACtD;AACA;;EAEA,OAAO;AACLN,IAAAA,MAAM,EAAEM,OAAO,CAACC,YAAY,GAAG;AAC7BN,MAAAA,IAAI,EAAE,QAAQ;AACdC,MAAAA,SAAS,EAAE,IAAI;AACfC,MAAAA,YAAY,EAAE,CAAC,oBAAoB,EAAE,qBAAqB;KAC3D,GAAGJ,WAAW,CAACC,MAAM;AAEtBI,IAAAA,MAAM,EAAEE,OAAO,CAACE,YAAY,GAAG;AAC7BP,MAAAA,IAAI,EAAE,QAAQ;AACdC,MAAAA,SAAS,EAAE,IAAI;AACfC,MAAAA,YAAY,EAAE,CAAC,oBAAoB,EAAE,qBAAqB;KAC3D,GAAGJ,WAAW,CAACK;GACjB;AACH;;AAEA;AACA;AACA;AACA;AACO,SAASK,eAAeA,GAAG;AAChC,EAAA,IAAIV,WAAW,CAACC,MAAM,CAACE,SAAS,EAAE;IAChC,OAAO;AACLQ,MAAAA,EAAE,EAAE,QAAQ;AACZ,MAAA,GAAGX,WAAW,CAACC;KAChB;AACH;AAEA,EAAA,IAAID,WAAW,CAACK,MAAM,CAACF,SAAS,EAAE;IAChC,OAAO;AACLQ,MAAAA,EAAE,EAAE,QAAQ;AACZ,MAAA,GAAGX,WAAW,CAACK;KAChB;AACH;AAEA,EAAA,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACO,SAASO,aAAaA,GAAG;EAC9B,OAAOZ,WAAW,CAACC,MAAM,CAACE,SAAS,IAAIH,WAAW,CAACK,MAAM,CAACF,SAAS;AACrE;;;;"}