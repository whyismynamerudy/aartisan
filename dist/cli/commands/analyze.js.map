{"version":3,"file":"analyze.js","sources":["../../../src/cli/commands/analyze.js"],"sourcesContent":["import chalk from 'chalk';\nimport ora from 'ora';\nimport path from 'path';\nimport fs from 'fs-extra';\n\n/**\n * Registers the 'analyze' command with the provided Commander program\n * @param {import('commander').Command} program - The Commander program instance\n */\nexport function analyzeCommand(program) {\n  program\n    .command('analyze')\n    .description('Analyze React components for AI optimization')\n    .argument('<source>', 'Path to components or directory to analyze')\n    .option('-o, --output <path>', 'Output directory for enhanced components')\n    .option('-f, --format <format>', 'Output format (json, jsx)', 'jsx')\n    .option('-l, --level <level>', 'Analysis level (basic, detailed, advanced)', 'detailed')\n    .action(async (source, options) => {\n      console.log(chalk.cyan('\\nüîç Analyzing React components...\\n'));\n      \n      try {\n        // Resolve the source path\n        const sourcePath = path.resolve(process.cwd(), source);\n        \n        // Check if the source exists\n        if (!await fs.pathExists(sourcePath)) {\n          console.error(chalk.red(`Error: Source path '${sourcePath}' does not exist`));\n          process.exit(1);\n        }\n        \n        // For now, just display a placeholder message\n        const spinner = ora('Analyzing components...').start();\n        \n        // Simulate analysis delay\n        await new Promise(resolve => setTimeout(resolve, 1500));\n        \n        spinner.succeed('Components analyzed successfully!');\n        console.log(chalk.green('\\n‚úÖ Analysis complete'));\n        console.log(`Found ${chalk.yellow('0')} components to enhance (placeholder)`);\n        console.log(chalk.cyan('\\nThis command is a placeholder. Full implementation coming soon.'));\n      } catch (error) {\n        console.error(chalk.red(`\\n‚ùå Error during analysis: ${error.message}`));\n        process.exit(1);\n      }\n    });\n}"],"names":["analyzeCommand","program","command","description","argument","option","action","source","options","console","log","chalk","cyan","sourcePath","path","resolve","process","cwd","fs","pathExists","error","red","exit","spinner","ora","start","Promise","setTimeout","succeed","green","yellow","message"],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACO,SAASA,cAAcA,CAACC,OAAO,EAAE;EACtCA,OAAO,CACJC,OAAO,CAAC,SAAS,CAAC,CAClBC,WAAW,CAAC,8CAA8C,CAAC,CAC3DC,QAAQ,CAAC,UAAU,EAAE,4CAA4C,CAAC,CAClEC,MAAM,CAAC,qBAAqB,EAAE,0CAA0C,CAAC,CACzEA,MAAM,CAAC,uBAAuB,EAAE,2BAA2B,EAAE,KAAK,CAAC,CACnEA,MAAM,CAAC,qBAAqB,EAAE,4CAA4C,EAAE,UAAU,CAAC,CACvFC,MAAM,CAAC,OAAOC,MAAM,EAAEC,OAAO,KAAK;IACjCC,OAAO,CAACC,GAAG,CAACC,KAAK,CAACC,IAAI,CAAC,sCAAsC,CAAC,CAAC;IAE/D,IAAI;AACF;AACA,MAAA,MAAMC,UAAU,GAAGC,IAAI,CAACC,OAAO,CAACC,OAAO,CAACC,GAAG,EAAE,EAAEV,MAAM,CAAC;;AAEtD;MACA,IAAI,EAAC,MAAMW,EAAE,CAACC,UAAU,CAACN,UAAU,CAAC,CAAE,EAAA;QACpCJ,OAAO,CAACW,KAAK,CAACT,KAAK,CAACU,GAAG,CAAC,CAAuBR,oBAAAA,EAAAA,UAAU,CAAkB,gBAAA,CAAA,CAAC,CAAC;AAC7EG,QAAAA,OAAO,CAACM,IAAI,CAAC,CAAC,CAAC;AACjB;;AAEA;MACA,MAAMC,OAAO,GAAGC,GAAG,CAAC,yBAAyB,CAAC,CAACC,KAAK,EAAE;;AAEtD;MACA,MAAM,IAAIC,OAAO,CAACX,OAAO,IAAIY,UAAU,CAACZ,OAAO,EAAE,IAAI,CAAC,CAAC;AAEvDQ,MAAAA,OAAO,CAACK,OAAO,CAAC,mCAAmC,CAAC;MACpDnB,OAAO,CAACC,GAAG,CAACC,KAAK,CAACkB,KAAK,CAAC,uBAAuB,CAAC,CAAC;MACjDpB,OAAO,CAACC,GAAG,CAAC,CAASC,MAAAA,EAAAA,KAAK,CAACmB,MAAM,CAAC,GAAG,CAAC,CAAA,oCAAA,CAAsC,CAAC;MAC7ErB,OAAO,CAACC,GAAG,CAACC,KAAK,CAACC,IAAI,CAAC,mEAAmE,CAAC,CAAC;KAC7F,CAAC,OAAOQ,KAAK,EAAE;AACdX,MAAAA,OAAO,CAACW,KAAK,CAACT,KAAK,CAACU,GAAG,CAAC,CAAA,2BAAA,EAA8BD,KAAK,CAACW,OAAO,CAAA,CAAE,CAAC,CAAC;AACvEf,MAAAA,OAAO,CAACM,IAAI,CAAC,CAAC,CAAC;AACjB;AACF,GAAC,CAAC;AACN;;;;"}