{"version":3,"file":"templates.js","sources":["../../../src/cli/utils/templates.js"],"sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// Get the __dirname equivalent in ES modules\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Templates directory path (relative to this file)\nconst templatesDir = path.resolve(__dirname, '../../../templates');\n\n/**\n * Retrieves the list of available templates\n * @returns {Promise<Array<{id: string, name: string, description: string}>>} List of available templates\n */\nexport async function getAvailableTemplates() {\n  // Ensure templates directory exists\n  if (!await fs.pathExists(templatesDir)) {\n    throw new Error(`Templates directory not found: ${templatesDir}`);\n  }\n  \n  // Read template directories\n  const templates = [];\n  const templateDirs = await fs.readdir(templatesDir);\n  \n  for (const templateId of templateDirs) {\n    const templateDir = path.join(templatesDir, templateId);\n    const stats = await fs.stat(templateDir);\n    \n    if (stats.isDirectory()) {\n      // Read template.json metadata if it exists\n      let name = templateId;\n      let description = '';\n      \n      const metadataPath = path.join(templateDir, 'template.json');\n      if (await fs.pathExists(metadataPath)) {\n        try {\n          const metadata = await fs.readJson(metadataPath);\n          name = metadata.name || name;\n          description = metadata.description || description;\n        } catch (err) {\n          console.warn(`Warning: Could not parse template metadata for '${templateId}'`);\n        }\n      }\n      \n      templates.push({\n        id: templateId,\n        name: formatTemplateName(name),\n        description\n      });\n    }\n  }\n  \n  return templates;\n}\n\n/**\n * Formats a template name for display\n * @param {string} name - Raw template name\n * @returns {string} Formatted template name\n */\nfunction formatTemplateName(name) {\n  return name\n    .split('-')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n}"],"names":["__filename","fileURLToPath","import","meta","url","__dirname","path","dirname","templatesDir","resolve","getAvailableTemplates","fs","pathExists","Error","templates","templateDirs","readdir","templateId","templateDir","join","stats","stat","isDirectory","name","description","metadataPath","metadata","readJson","err","console","warn","push","id","formatTemplateName","split","map","word","charAt","toUpperCase","slice"],"mappings":";;;;AAIA;AACA,MAAMA,UAAU,GAAGC,aAAa,CAACC,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC;AACjD,MAAMC,SAAS,GAAGC,IAAI,CAACC,OAAO,CAACP,UAAU,CAAC;;AAE1C;AACA,MAAMQ,YAAY,GAAGF,IAAI,CAACG,OAAO,CAACJ,SAAS,EAAE,oBAAoB,CAAC;;AAElE;AACA;AACA;AACA;AACO,eAAeK,qBAAqBA,GAAG;AAC5C;EACA,IAAI,EAAC,MAAMC,EAAE,CAACC,UAAU,CAACJ,YAAY,CAAC,CAAE,EAAA;AACtC,IAAA,MAAM,IAAIK,KAAK,CAAC,CAAkCL,+BAAAA,EAAAA,YAAY,EAAE,CAAC;AACnE;;AAEA;EACA,MAAMM,SAAS,GAAG,EAAE;EACpB,MAAMC,YAAY,GAAG,MAAMJ,EAAE,CAACK,OAAO,CAACR,YAAY,CAAC;AAEnD,EAAA,KAAK,MAAMS,UAAU,IAAIF,YAAY,EAAE;IACrC,MAAMG,WAAW,GAAGZ,IAAI,CAACa,IAAI,CAACX,YAAY,EAAES,UAAU,CAAC;IACvD,MAAMG,KAAK,GAAG,MAAMT,EAAE,CAACU,IAAI,CAACH,WAAW,CAAC;AAExC,IAAA,IAAIE,KAAK,CAACE,WAAW,EAAE,EAAE;AACvB;MACA,IAAIC,IAAI,GAAGN,UAAU;MACrB,IAAIO,WAAW,GAAG,EAAE;MAEpB,MAAMC,YAAY,GAAGnB,IAAI,CAACa,IAAI,CAACD,WAAW,EAAE,eAAe,CAAC;AAC5D,MAAA,IAAI,MAAMP,EAAE,CAACC,UAAU,CAACa,YAAY,CAAC,EAAE;QACrC,IAAI;UACF,MAAMC,QAAQ,GAAG,MAAMf,EAAE,CAACgB,QAAQ,CAACF,YAAY,CAAC;AAChDF,UAAAA,IAAI,GAAGG,QAAQ,CAACH,IAAI,IAAIA,IAAI;AAC5BC,UAAAA,WAAW,GAAGE,QAAQ,CAACF,WAAW,IAAIA,WAAW;SAClD,CAAC,OAAOI,GAAG,EAAE;AACZC,UAAAA,OAAO,CAACC,IAAI,CAAC,CAAmDb,gDAAAA,EAAAA,UAAU,GAAG,CAAC;AAChF;AACF;MAEAH,SAAS,CAACiB,IAAI,CAAC;AACbC,QAAAA,EAAE,EAAEf,UAAU;AACdM,QAAAA,IAAI,EAAEU,kBAAkB,CAACV,IAAI,CAAC;AAC9BC,QAAAA;AACF,OAAC,CAAC;AACJ;AACF;AAEA,EAAA,OAAOV,SAAS;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASmB,kBAAkBA,CAACV,IAAI,EAAE;AAChC,EAAA,OAAOA,IAAI,CACRW,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,CACzDpB,IAAI,CAAC,GAAG,CAAC;AACd;;;;"}