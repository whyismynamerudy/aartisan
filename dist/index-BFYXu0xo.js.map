{"version":3,"file":"index-BFYXu0xo.js","sources":["../node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/defaultStsRoleAssumers.js","../node_modules/@aws-sdk/nested-clients/dist-es/submodules/sts/defaultRoleAssumers.js"],"sourcesContent":["import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { AssumeRoleCommand } from \"./commands/AssumeRoleCommand\";\nimport { AssumeRoleWithWebIdentityCommand, } from \"./commands/AssumeRoleWithWebIdentityCommand\";\nconst ASSUME_ROLE_DEFAULT_REGION = \"us-east-1\";\nconst getAccountIdFromAssumedRoleUser = (assumedRoleUser) => {\n    if (typeof assumedRoleUser?.Arn === \"string\") {\n        const arnComponents = assumedRoleUser.Arn.split(\":\");\n        if (arnComponents.length > 4 && arnComponents[4] !== \"\") {\n            return arnComponents[4];\n        }\n    }\n    return undefined;\n};\nconst resolveRegion = async (_region, _parentRegion, credentialProviderLogger) => {\n    const region = typeof _region === \"function\" ? await _region() : _region;\n    const parentRegion = typeof _parentRegion === \"function\" ? await _parentRegion() : _parentRegion;\n    credentialProviderLogger?.debug?.(\"@aws-sdk/client-sts::resolveRegion\", \"accepting first of:\", `${region} (provider)`, `${parentRegion} (parent client)`, `${ASSUME_ROLE_DEFAULT_REGION} (STS default)`);\n    return region ?? parentRegion ?? ASSUME_ROLE_DEFAULT_REGION;\n};\nexport const getDefaultRoleAssumer = (stsOptions, STSClient) => {\n    let stsClient;\n    let closureSourceCreds;\n    return async (sourceCreds, params) => {\n        closureSourceCreds = sourceCreds;\n        if (!stsClient) {\n            const { logger = stsOptions?.parentClientConfig?.logger, region, requestHandler = stsOptions?.parentClientConfig?.requestHandler, credentialProviderLogger, } = stsOptions;\n            const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);\n            const isCompatibleRequestHandler = !isH2(requestHandler);\n            stsClient = new STSClient({\n                profile: stsOptions?.parentClientConfig?.profile,\n                credentialDefaultProvider: () => async () => closureSourceCreds,\n                region: resolvedRegion,\n                requestHandler: isCompatibleRequestHandler ? requestHandler : undefined,\n                logger: logger,\n            });\n        }\n        const { Credentials, AssumedRoleUser } = await stsClient.send(new AssumeRoleCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n        }\n        const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser);\n        const credentials = {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n            ...(Credentials.CredentialScope && { credentialScope: Credentials.CredentialScope }),\n            ...(accountId && { accountId }),\n        };\n        setCredentialFeature(credentials, \"CREDENTIALS_STS_ASSUME_ROLE\", \"i\");\n        return credentials;\n    };\n};\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions, STSClient) => {\n    let stsClient;\n    return async (params) => {\n        if (!stsClient) {\n            const { logger = stsOptions?.parentClientConfig?.logger, region, requestHandler = stsOptions?.parentClientConfig?.requestHandler, credentialProviderLogger, } = stsOptions;\n            const resolvedRegion = await resolveRegion(region, stsOptions?.parentClientConfig?.region, credentialProviderLogger);\n            const isCompatibleRequestHandler = !isH2(requestHandler);\n            stsClient = new STSClient({\n                profile: stsOptions?.parentClientConfig?.profile,\n                region: resolvedRegion,\n                requestHandler: isCompatibleRequestHandler ? requestHandler : undefined,\n                logger: logger,\n            });\n        }\n        const { Credentials, AssumedRoleUser } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);\n        }\n        const accountId = getAccountIdFromAssumedRoleUser(AssumedRoleUser);\n        const credentials = {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n            ...(Credentials.CredentialScope && { credentialScope: Credentials.CredentialScope }),\n            ...(accountId && { accountId }),\n        };\n        if (accountId) {\n            setCredentialFeature(credentials, \"RESOLVED_ACCOUNT_ID\", \"T\");\n        }\n        setCredentialFeature(credentials, \"CREDENTIALS_STS_ASSUME_ROLE_WEB_ID\", \"k\");\n        return credentials;\n    };\n};\nexport const decorateDefaultCredentialProvider = (provider) => (input) => provider({\n    roleAssumer: getDefaultRoleAssumer(input, input.stsClientCtor),\n    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input, input.stsClientCtor),\n    ...input,\n});\nconst isH2 = (requestHandler) => {\n    return requestHandler?.metadata?.handlerProtocol === \"h2\";\n};\n","import { getDefaultRoleAssumer as StsGetDefaultRoleAssumer, getDefaultRoleAssumerWithWebIdentity as StsGetDefaultRoleAssumerWithWebIdentity, } from \"./defaultStsRoleAssumers\";\nimport { STSClient } from \"./STSClient\";\nconst getCustomizableStsClientCtor = (baseCtor, customizations) => {\n    if (!customizations)\n        return baseCtor;\n    else\n        return class CustomizableSTSClient extends baseCtor {\n            constructor(config) {\n                super(config);\n                for (const customization of customizations) {\n                    this.middlewareStack.use(customization);\n                }\n            }\n        };\n};\nexport const getDefaultRoleAssumer = (stsOptions = {}, stsPlugins) => StsGetDefaultRoleAssumer(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins) => StsGetDefaultRoleAssumerWithWebIdentity(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));\nexport const decorateDefaultCredentialProvider = (provider) => (input) => provider({\n    roleAssumer: getDefaultRoleAssumer(input),\n    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input),\n    ...input,\n});\n"],"names":["getDefaultRoleAssumer","getDefaultRoleAssumerWithWebIdentity","StsGetDefaultRoleAssumer","StsGetDefaultRoleAssumerWithWebIdentity"],"mappings":"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","x_google_ignoreList":[0,1]}