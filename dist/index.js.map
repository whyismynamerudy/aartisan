{"version":3,"file":"index.js","sources":["../src/core/metadata.js","../src/core/index.js","../src/react/provider.jsx","../src/react/defineComponent.jsx","../src/react/hooks.js","../src/react/directives.js","../src/react/hoc.jsx","../src/index.js"],"sourcesContent":["/**\n * aartisan - Metadata system\n * \n * Handles creation, validation, and enhancement of semantic metadata\n * for AI agent understanding.\n */\n\n/**\n * Creates a metadata object with semantic information\n * @param {Object} options - Metadata options\n * @param {string} options.name - Component/element name\n * @param {string} options.purpose - Purpose of the component/element\n * @param {string[]} options.interactions - Possible interactions\n * @param {Object} options.props - Props description\n * @param {Object} options.semantics - Additional semantic information\n * @returns {Object} Metadata object\n */\nexport function createMetadata({\n    name,\n    purpose,\n    interactions = [],\n    props = {},\n    semantics = {}\n  } = {}) {\n    return {\n      name,\n      purpose,\n      interactions,\n      props,\n      semantics,\n      timestamp: new Date().toISOString(),\n      version: '0.1.0'\n    };\n  }\n  \n  /**\n   * Retrieves metadata from an enhanced element\n   * @param {Object} element - Enhanced element\n   * @returns {Object|null} Metadata or null if not enhanced\n   */\n  export function getMetadata(element) {\n    if (element && element.__aartisan) {\n      return element.__aartisan;\n    }\n    return null;\n  }\n  \n  /**\n   * Enhances existing metadata with additional information\n   * @param {Object} metadata - Existing metadata\n   * @param {Object} enhancement - Additional metadata to merge\n   * @returns {Object} Enhanced metadata\n   */\n  export function enhanceMetadata(metadata, enhancement) {\n    return {\n      ...metadata,\n      ...enhancement,\n      semantics: {\n        ...(metadata.semantics || {}),\n        ...(enhancement.semantics || {})\n      },\n      // Keep original timestamp but add update timestamp\n      created: metadata.timestamp || metadata.created || new Date().toISOString(),\n      updated: new Date().toISOString()\n    };\n  }\n  \n  /**\n   * Validates metadata for completeness and correctness\n   * @param {Object} metadata - Metadata to validate\n   * @returns {Object} Validation result { valid: boolean, errors: string[] }\n   */\n  export function validateMetadata(metadata) {\n    const errors = [];\n    \n    if (!metadata) {\n      return { valid: false, errors: ['Metadata is null or undefined'] };\n    }\n    \n    // Check required fields\n    if (!metadata.name) {\n      errors.push('Missing required field: name');\n    }\n    \n    if (!metadata.purpose) {\n      errors.push('Missing required field: purpose');\n    }\n    \n    // Check types\n    if (metadata.interactions && !Array.isArray(metadata.interactions)) {\n      errors.push('Field \"interactions\" must be an array');\n    }\n    \n    if (metadata.props && typeof metadata.props !== 'object') {\n      errors.push('Field \"props\" must be an object');\n    }\n    \n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }","/**\n * aartisan - Core functionality\n */\nimport { createMetadata, getMetadata, enhanceMetadata } from './metadata.js';\n\n// Export metadata system\nexport {\n  createMetadata,\n  getMetadata,\n  enhanceMetadata\n};\n\n/**\n * Creates a semantically enhanced component or element\n * @param {Object} element - The React element or component to enhance\n * @param {Object} semantics - Semantic metadata for the element\n * @returns {Object} Enhanced element\n */\nexport function enhance(element, semantics = {}) {\n  return {\n    ...element,\n    __aartisan: {\n      ...semantics,\n      enhanced: true,\n      version: '0.1.0'\n    }\n  };\n}\n\n/**\n * Checks if an element has been enhanced with aartisan metadata\n * @param {Object} element - Element to check\n * @returns {boolean} Whether the element is enhanced\n */\nexport function isEnhanced(element) {\n  return element && element.__aartisan && element.__aartisan.enhanced === true;\n}\n\n/**\n * Creates a semantic context object for AI agent understanding\n * @param {Object} options - Context options\n * @returns {Object} Semantic context object\n */\nexport function createContext(options = {}) {\n  return {\n    type: 'aartisan-context',\n    version: '0.1.0',\n    timestamp: new Date().toISOString(),\n    ...options\n  };\n}","import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { createContext as createAIContext } from '../core/index.js';\n\n// Create the context\nconst AartisanContext = createContext(null);\n\n/**\n * Provider component for Aartisan functionality\n * @param {Object} props - Component props\n * @param {React.ReactNode} props.children - Child components\n * @param {Object} props.config - Configuration options\n * @param {boolean} props.debug - Enable debug mode\n * @returns {React.ReactElement} Provider component\n */\nexport function AartisanProvider({ \n  children, \n  config = {}, \n  debug = false \n}) {\n  const [contextValue, setContextValue] = useState(() => ({\n    config,\n    debug,\n    semanticContext: createAIContext(config),\n    enhancedComponents: new Map(),\n    version: '0.1.0'\n  }));\n  \n  // Update context if config or debug changes\n  useEffect(() => {\n    setContextValue(prevContext => ({\n      ...prevContext,\n      config,\n      debug,\n      semanticContext: createAIContext(config)\n    }));\n  }, [config, debug]);\n  \n  /**\n   * Registers an enhanced component in the context\n   * @param {string} id - Component ID\n   * @param {Object} metadata - Component metadata\n   */\n  const registerComponent = (id, metadata) => {\n    setContextValue(prevContext => {\n      const enhancedComponents = new Map(prevContext.enhancedComponents);\n      enhancedComponents.set(id, metadata);\n      \n      return {\n        ...prevContext,\n        enhancedComponents\n      };\n    });\n    \n    if (debug) {\n      console.log(`[Aartisan] Registered component: ${id}`, metadata);\n    }\n  };\n  \n  /**\n   * Unregisters a component from the context\n   * @param {string} id - Component ID\n   */\n  const unregisterComponent = (id) => {\n    setContextValue(prevContext => {\n      const enhancedComponents = new Map(prevContext.enhancedComponents);\n      enhancedComponents.delete(id);\n      \n      return {\n        ...prevContext,\n        enhancedComponents\n      };\n    });\n    \n    if (debug) {\n      console.log(`[Aartisan] Unregistered component: ${id}`);\n    }\n  };\n  \n  /**\n   * Updates the semantic context\n   * @param {Object} newContext - New context data\n   */\n  const updateSemanticContext = (newContext) => {\n    setContextValue(prevContext => ({\n      ...prevContext,\n      semanticContext: {\n        ...prevContext.semanticContext,\n        ...newContext,\n        updated: new Date().toISOString()\n      }\n    }));\n  };\n  \n  const value = {\n    ...contextValue,\n    registerComponent,\n    unregisterComponent,\n    updateSemanticContext\n  };\n  \n  return (\n    <AartisanContext.Provider value={value}>\n      {children}\n    </AartisanContext.Provider>\n  );\n}\n\n/**\n * Hook to access the Aartisan context\n * @returns {Object} Aartisan context\n */\nexport function useAartisanContext() {\n  const context = useContext(AartisanContext);\n  if (!context) {\n    throw new Error('useAartisanContext must be used within an AartisanProvider');\n  }\n  return context;\n}","import React, { forwardRef, useEffect, useId } from 'react';\nimport { createMetadata } from '../core/metadata.js';\nimport { useAartisanContext } from './provider.jsx';\n\n/**\n * Defines a semantically enhanced React component\n * @param {Object} options - Component options\n * @param {string} options.name - Component name\n * @param {Object} options.semantics - Semantic metadata\n * @param {string} options.semantics.purpose - Purpose of the component\n * @param {string[]} options.semantics.interactions - Possible interactions\n * @param {Object} options.props - Props description\n * @param {Function|React.Component} options.render - Component render function or class\n * @returns {React.ForwardRefExoticComponent} Enhanced React component\n */\nexport function defineComponent({\n  name,\n  semantics = {},\n  props = {},\n  render\n}) {\n  // Create component metadata\n  const metadata = createMetadata({\n    name,\n    purpose: semantics.purpose,\n    interactions: semantics.interactions,\n    props,\n    semantics\n  });\n  \n  // Create the enhanced component\n  const EnhancedComponent = forwardRef((props, ref) => {\n    const { registerComponent, unregisterComponent, debug } = useAartisanContext();\n    const componentId = useId();\n    \n    useEffect(() => {\n      // Register component when mounted\n      registerComponent(componentId, {\n        ...metadata,\n        instanceProps: props\n      });\n      \n      // Unregister when unmounted\n      return () => {\n        unregisterComponent(componentId);\n      };\n    }, []);\n    \n    // Log render if in debug mode\n    if (debug) {\n      console.log(`[Aartisan] Rendering ${name}`, { props, metadata });\n    }\n    \n    // Add semantic metadata to rendered output\n    const dataAttributes = {\n      'data-aartisan': true,\n      'data-aartisan-id': componentId,\n      'data-aartisan-name': name,\n      'data-aartisan-purpose': semantics.purpose || ''\n    };\n    \n    // Call the render function with props and ref\n    const rendered = render({ ...props, ref });\n    \n    // If the rendered result is a React element, clone it and add metadata\n    if (React.isValidElement(rendered)) {\n      return React.cloneElement(rendered, {\n        ...rendered.props,\n        ...dataAttributes,\n        ref: rendered.ref || ref\n      });\n    }\n    \n    // Otherwise, wrap it in a div with metadata\n    return (\n      <div {...dataAttributes}>\n        {rendered}\n      </div>\n    );\n  });\n  \n  // Add metadata to component for introspection\n  EnhancedComponent.displayName = `Aartisan(${name})`;\n  EnhancedComponent.__aartisan = metadata;\n  \n  // Add static methods for metadata access\n  EnhancedComponent.getMetadata = () => metadata;\n  EnhancedComponent.getSemantics = () => semantics;\n  \n  return EnhancedComponent;\n}","import { useRef, useEffect, useState, useCallback, useId } from 'react';\nimport { useAartisanContext } from './provider.jsx';\nimport { createMetadata } from '../core/metadata.js';\n\n/**\n * Hook to enhance a component for AI understanding\n * @param {string} name - Component name\n * @param {Object} semantics - Semantic metadata\n * @returns {Object} - Ref and props to apply to the component\n */\nexport function useAIEnhanced(name, semantics = {}) {\n  const elementRef = useRef(null);\n  const componentId = useId();\n  const { registerComponent, unregisterComponent, debug } = useAartisanContext();\n  \n  // Create metadata\n  const metadata = createMetadata({\n    name,\n    purpose: semantics.purpose,\n    interactions: semantics.interactions,\n    semantics\n  });\n  \n  // Register component when mounted\n  useEffect(() => {\n    if (elementRef.current) {\n      registerComponent(componentId, metadata);\n      \n      return () => {\n        unregisterComponent(componentId);\n      };\n    }\n  }, [componentId, registerComponent, unregisterComponent]);\n  \n  // Data attributes for the component\n  const aiProps = {\n    'data-aartisan': true,\n    'data-aartisan-id': componentId,\n    'data-aartisan-name': name,\n    'data-aartisan-purpose': semantics.purpose || ''\n  };\n  \n  return { ref: elementRef, aiProps };\n}\n\n/**\n * Hook to access and update AI context\n * @param {Object} initialContext - Initial context data\n * @returns {Object} Context and update function\n */\nexport function useAIContext(initialContext = {}) {\n  const { semanticContext, updateSemanticContext } = useAartisanContext();\n  \n  // Initialize context if provided\n  useEffect(() => {\n    if (Object.keys(initialContext).length > 0) {\n      updateSemanticContext(initialContext);\n    }\n  }, []);\n  \n  return {\n    context: semanticContext,\n    updateContext: updateSemanticContext\n  };\n}\n\n/**\n * Hook to define and handle AI interactions\n * @param {Object} interactions - Map of interaction handlers\n * @returns {Object} Interaction handlers\n */\nexport function useAIInteraction(interactions = {}) {\n  const { debug } = useAartisanContext();\n  const [activeInteraction, setActiveInteraction] = useState(null);\n  \n  // Wrap handlers to include metadata\n  const enhancedInteractions = Object.entries(interactions).reduce(\n    (acc, [name, handler]) => {\n      acc[name] = (...args) => {\n        if (debug) {\n          console.log(`[Aartisan] Interaction: ${name}`, args);\n        }\n        \n        setActiveInteraction(name);\n        const result = handler(...args);\n        setActiveInteraction(null);\n        \n        return result;\n      };\n      return acc;\n    },\n    {}\n  );\n  \n  return {\n    interactions: enhancedInteractions,\n    activeInteraction,\n    isInteracting: activeInteraction !== null\n  };\n}","/**\n * aartisan - Directive system\n * \n * Provides a way to add semantic metadata to JSX elements\n * through attribute-like directives.\n */\n\n/**\n * Creates a directive function to enhance elements\n * @param {Function} fn - Directive implementation\n * @returns {Function} Directive function\n */\nexport function directive(fn) {\n    return (...args) => {\n      return (props = {}) => {\n        const element = document.createElement('div');\n        \n        // Apply the directive to the element\n        fn(element, ...args);\n        \n        // Convert DOM attributes to React props\n        const attributeProps = {};\n        for (let i = 0; i < element.attributes.length; i++) {\n          const attr = element.attributes[i];\n          attributeProps[attr.name] = attr.value;\n        }\n        \n        return {\n          ...props,\n          ...attributeProps\n        };\n      };\n    };\n  }\n  \n  /**\n   * Directive to specify the purpose of an element\n   * @type {Function}\n   */\n  export const aiPurpose = directive((element, purpose) => {\n    element.setAttribute('data-aartisan', 'true');\n    element.setAttribute('data-aartisan-purpose', purpose);\n  });\n  \n  /**\n   * Directive to specify possible interactions\n   * @type {Function}\n   */\n  export const aiInteraction = directive((element, interaction) => {\n    element.setAttribute('data-aartisan', 'true');\n    element.setAttribute('data-aartisan-interaction', interaction);\n  });\n  \n  /**\n   * Directive to add a description for AI understanding\n   * @type {Function}\n   */\n  export const aiDescription = directive((element, description) => {\n    element.setAttribute('data-aartisan', 'true');\n    element.setAttribute('data-aartisan-description', description);\n  });\n  \n  /**\n   * Directive to mark an element as important for AI agents\n   * @type {Function}\n   */\n  export const aiImportant = directive((element, level = 'medium') => {\n    element.setAttribute('data-aartisan', 'true');\n    element.setAttribute('data-aartisan-importance', level);\n  });\n  \n  /**\n   * Directive to specify content type\n   * @type {Function}\n   */\n  export const aiContentType = directive((element, contentType) => {\n    element.setAttribute('data-aartisan', 'true');\n    element.setAttribute('data-aartisan-content-type', contentType);\n  });\n  \n  /**\n   * Directive to group related elements\n   * @type {Function}\n   */\n  export const aiGroup = directive((element, groupId) => {\n    element.setAttribute('data-aartisan', 'true');\n    element.setAttribute('data-aartisan-group', groupId);\n  });","import React, { forwardRef, useId } from 'react';\nimport { useAartisanContext } from './provider.jsx';\nimport { createMetadata } from '../core/metadata.js';\n\n/**\n * Higher-order component to enhance a component with AI metadata\n * @param {Object} options - Enhancement options\n * @param {string} options.name - Component name\n * @param {Object} options.semantics - Semantic metadata\n * @returns {Function} HOC wrapper function\n */\nexport function withAIEnhancement(options = {}) {\n  const { name, semantics = {} } = options;\n  \n  // Create metadata\n  const metadata = createMetadata({\n    name: name || 'EnhancedComponent',\n    purpose: semantics.purpose,\n    interactions: semantics.interactions,\n    semantics\n  });\n  \n  // Return the HOC\n  return (WrappedComponent) => {\n    // Create an enhanced component\n    const EnhancedComponent = forwardRef((props, ref) => {\n      const componentId = useId();\n      const { registerComponent, unregisterComponent } = useAartisanContext();\n      \n      // Register on mount\n      React.useEffect(() => {\n        registerComponent(componentId, {\n          ...metadata,\n          instanceProps: props\n        });\n        \n        return () => {\n          unregisterComponent(componentId);\n        };\n      }, []);\n      \n      // Data attributes for AI understanding\n      const aiProps = {\n        'data-aartisan': true,\n        'data-aartisan-id': componentId,\n        'data-aartisan-name': metadata.name,\n        'data-aartisan-purpose': semantics.purpose || ''\n      };\n      \n      // Render the wrapped component with AI props\n      return <WrappedComponent {...props} {...aiProps} ref={ref} />;\n    });\n    \n    // Add metadata and display name\n    EnhancedComponent.displayName = `withAIEnhancement(${\n      WrappedComponent.displayName || WrappedComponent.name || 'Component'\n    })`;\n    EnhancedComponent.__aartisan = metadata;\n    \n    return EnhancedComponent;\n  };\n}\n\n/**\n * Higher-order component to provide AI context\n * @param {Object} context - AI context data\n * @returns {Function} HOC wrapper function\n */\nexport function withAIContext(context = {}) {\n  return (WrappedComponent) => {\n    // Create a context provider component\n    const WithAIContext = (props) => {\n      const { updateSemanticContext } = useAartisanContext();\n      \n      // Update context on mount\n      React.useEffect(() => {\n        updateSemanticContext(context);\n      }, []);\n      \n      // Render the wrapped component\n      return <WrappedComponent {...props} />;\n    };\n    \n    // Add display name\n    WithAIContext.displayName = `withAIContext(${\n      WrappedComponent.displayName || WrappedComponent.name || 'Component'\n    })`;\n    \n    return WithAIContext;\n  };\n}","/**\n * aartisan - AI Agent Toolkit for React\n * Main package entry point\n */\n\n// Export core functionality\nexport * from './core/index.js';\n\n// Export React integration\nexport * from './react/index.js';\n\n// Version information\nexport const version = '0.1.0';\n\n// Package metadata\nexport const metadata = {\n  name: 'aartisan',\n  description: 'AI Agent Toolkit for React - Create React applications optimized for AI interaction',\n  repository: 'https://github.com/whyismynamerudy/aartisan',\n  author: 'Your Name',\n  license: 'MIT'\n};"],"names":["createMetadata","name","purpose","interactions","props","semantics","timestamp","Date","toISOString","version","getMetadata","element","__aartisan","enhanceMetadata","metadata","enhancement","created","updated","enhance","enhanced","isEnhanced","createContext","options","type","AartisanContext","AartisanProvider","children","config","debug","contextValue","setContextValue","useState","semanticContext","createAIContext","enhancedComponents","Map","useEffect","prevContext","registerComponent","id","set","console","log","unregisterComponent","delete","updateSemanticContext","newContext","value","React","createElement","Provider","useAartisanContext","context","useContext","Error","defineComponent","render","EnhancedComponent","forwardRef","ref","componentId","useId","instanceProps","dataAttributes","rendered","isValidElement","cloneElement","displayName","getSemantics","useAIEnhanced","elementRef","useRef","current","aiProps","useAIContext","initialContext","Object","keys","length","updateContext","useAIInteraction","activeInteraction","setActiveInteraction","enhancedInteractions","entries","reduce","acc","handler","args","result","isInteracting","directive","fn","document","attributeProps","i","attributes","attr","aiPurpose","setAttribute","aiInteraction","interaction","aiDescription","description","withAIEnhancement","WrappedComponent","_extends","withAIContext","WithAIContext","repository","author","license"],"mappings":"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"}