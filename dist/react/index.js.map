{"version":3,"file":"index.js","sources":["../../src/react/provider.jsx","../../src/react/defineComponent.jsx","../../src/react/hooks.js","../../src/react/directives.js","../../src/react/hoc.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { createContext as createAIContext } from '../core/index.js';\n\n// Create the context\nconst AartisanContext = createContext(null);\n\n/**\n * Provider component for Aartisan functionality\n * @param {Object} props - Component props\n * @param {React.ReactNode} props.children - Child components\n * @param {Object} props.config - Configuration options\n * @param {boolean} props.debug - Enable debug mode\n * @returns {React.ReactElement} Provider component\n */\nexport function AartisanProvider({ \n  children, \n  config = {}, \n  debug = false \n}) {\n  const [contextValue, setContextValue] = useState(() => ({\n    config,\n    debug,\n    semanticContext: createAIContext(config),\n    enhancedComponents: new Map(),\n    version: '0.1.0'\n  }));\n  \n  // Update context if config or debug changes\n  useEffect(() => {\n    setContextValue(prevContext => ({\n      ...prevContext,\n      config,\n      debug,\n      semanticContext: createAIContext(config)\n    }));\n  }, [config, debug]);\n  \n  /**\n   * Registers an enhanced component in the context\n   * @param {string} id - Component ID\n   * @param {Object} metadata - Component metadata\n   */\n  const registerComponent = (id, metadata) => {\n    setContextValue(prevContext => {\n      const enhancedComponents = new Map(prevContext.enhancedComponents);\n      enhancedComponents.set(id, metadata);\n      \n      return {\n        ...prevContext,\n        enhancedComponents\n      };\n    });\n    \n    if (debug) {\n      console.log(`[Aartisan] Registered component: ${id}`, metadata);\n    }\n  };\n  \n  /**\n   * Unregisters a component from the context\n   * @param {string} id - Component ID\n   */\n  const unregisterComponent = (id) => {\n    setContextValue(prevContext => {\n      const enhancedComponents = new Map(prevContext.enhancedComponents);\n      enhancedComponents.delete(id);\n      \n      return {\n        ...prevContext,\n        enhancedComponents\n      };\n    });\n    \n    if (debug) {\n      console.log(`[Aartisan] Unregistered component: ${id}`);\n    }\n  };\n  \n  /**\n   * Updates the semantic context\n   * @param {Object} newContext - New context data\n   */\n  const updateSemanticContext = (newContext) => {\n    setContextValue(prevContext => ({\n      ...prevContext,\n      semanticContext: {\n        ...prevContext.semanticContext,\n        ...newContext,\n        updated: new Date().toISOString()\n      }\n    }));\n  };\n  \n  const value = {\n    ...contextValue,\n    registerComponent,\n    unregisterComponent,\n    updateSemanticContext\n  };\n  \n  return (\n    <AartisanContext.Provider value={value}>\n      {children}\n    </AartisanContext.Provider>\n  );\n}\n\n/**\n * Hook to access the Aartisan context\n * @returns {Object} Aartisan context\n */\nexport function useAartisanContext() {\n  const context = useContext(AartisanContext);\n  if (!context) {\n    throw new Error('useAartisanContext must be used within an AartisanProvider');\n  }\n  return context;\n}","import React, { forwardRef, useEffect, useId } from 'react';\nimport { createMetadata } from '../core/metadata.js';\nimport { useAartisanContext } from './provider.jsx';\n\n/**\n * Defines a semantically enhanced React component\n * @param {Object} options - Component options\n * @param {string} options.name - Component name\n * @param {Object} options.semantics - Semantic metadata\n * @param {string} options.semantics.purpose - Purpose of the component\n * @param {string[]} options.semantics.interactions - Possible interactions\n * @param {Object} options.props - Props description\n * @param {Function|React.Component} options.render - Component render function or class\n * @returns {React.ForwardRefExoticComponent} Enhanced React component\n */\nexport function defineComponent({\n  name,\n  semantics = {},\n  props = {},\n  render\n}) {\n  // Create component metadata\n  const metadata = createMetadata({\n    name,\n    purpose: semantics.purpose,\n    interactions: semantics.interactions,\n    props,\n    semantics\n  });\n  \n  // Create the enhanced component\n  const EnhancedComponent = forwardRef((props, ref) => {\n    const { registerComponent, unregisterComponent, debug } = useAartisanContext();\n    const componentId = useId();\n    \n    useEffect(() => {\n      // Register component when mounted\n      registerComponent(componentId, {\n        ...metadata,\n        instanceProps: props\n      });\n      \n      // Unregister when unmounted\n      return () => {\n        unregisterComponent(componentId);\n      };\n    }, []);\n    \n    // Log render if in debug mode\n    if (debug) {\n      console.log(`[Aartisan] Rendering ${name}`, { props, metadata });\n    }\n    \n    // Add semantic metadata to rendered output\n    const dataAttributes = {\n      'data-aartisan': true,\n      'data-aartisan-id': componentId,\n      'data-aartisan-name': name,\n      'data-aartisan-purpose': semantics.purpose || ''\n    };\n    \n    // Call the render function with props and ref\n    const rendered = render({ ...props, ref });\n    \n    // If the rendered result is a React element, clone it and add metadata\n    if (React.isValidElement(rendered)) {\n      return React.cloneElement(rendered, {\n        ...rendered.props,\n        ...dataAttributes,\n        ref: rendered.ref || ref\n      });\n    }\n    \n    // Otherwise, wrap it in a div with metadata\n    return (\n      <div {...dataAttributes}>\n        {rendered}\n      </div>\n    );\n  });\n  \n  // Add metadata to component for introspection\n  EnhancedComponent.displayName = `Aartisan(${name})`;\n  EnhancedComponent.__aartisan = metadata;\n  \n  // Add static methods for metadata access\n  EnhancedComponent.getMetadata = () => metadata;\n  EnhancedComponent.getSemantics = () => semantics;\n  \n  return EnhancedComponent;\n}","import { useRef, useEffect, useState, useCallback, useId } from 'react';\nimport { useAartisanContext } from './provider.jsx';\nimport { createMetadata } from '../core/metadata.js';\n\n/**\n * Hook to enhance a component for AI understanding\n * @param {string} name - Component name\n * @param {Object} semantics - Semantic metadata\n * @returns {Object} - Ref and props to apply to the component\n */\nexport function useAIEnhanced(name, semantics = {}) {\n  const elementRef = useRef(null);\n  const componentId = useId();\n  const { registerComponent, unregisterComponent, debug } = useAartisanContext();\n  \n  // Create metadata\n  const metadata = createMetadata({\n    name,\n    purpose: semantics.purpose,\n    interactions: semantics.interactions,\n    semantics\n  });\n  \n  // Register component when mounted\n  useEffect(() => {\n    if (elementRef.current) {\n      registerComponent(componentId, metadata);\n      \n      return () => {\n        unregisterComponent(componentId);\n      };\n    }\n  }, [componentId, registerComponent, unregisterComponent]);\n  \n  // Data attributes for the component\n  const aiProps = {\n    'data-aartisan': true,\n    'data-aartisan-id': componentId,\n    'data-aartisan-name': name,\n    'data-aartisan-purpose': semantics.purpose || ''\n  };\n  \n  return { ref: elementRef, aiProps };\n}\n\n/**\n * Hook to access and update AI context\n * @param {Object} initialContext - Initial context data\n * @returns {Object} Context and update function\n */\nexport function useAIContext(initialContext = {}) {\n  const { semanticContext, updateSemanticContext } = useAartisanContext();\n  \n  // Initialize context if provided\n  useEffect(() => {\n    if (Object.keys(initialContext).length > 0) {\n      updateSemanticContext(initialContext);\n    }\n  }, []);\n  \n  return {\n    context: semanticContext,\n    updateContext: updateSemanticContext\n  };\n}\n\n/**\n * Hook to define and handle AI interactions\n * @param {Object} interactions - Map of interaction handlers\n * @returns {Object} Interaction handlers\n */\nexport function useAIInteraction(interactions = {}) {\n  const { debug } = useAartisanContext();\n  const [activeInteraction, setActiveInteraction] = useState(null);\n  \n  // Wrap handlers to include metadata\n  const enhancedInteractions = Object.entries(interactions).reduce(\n    (acc, [name, handler]) => {\n      acc[name] = (...args) => {\n        if (debug) {\n          console.log(`[Aartisan] Interaction: ${name}`, args);\n        }\n        \n        setActiveInteraction(name);\n        const result = handler(...args);\n        setActiveInteraction(null);\n        \n        return result;\n      };\n      return acc;\n    },\n    {}\n  );\n  \n  return {\n    interactions: enhancedInteractions,\n    activeInteraction,\n    isInteracting: activeInteraction !== null\n  };\n}","/**\n * aartisan - Directive system\n * \n * Provides a way to add semantic metadata to JSX elements\n * through attribute-like directives.\n */\n\n/**\n * Creates a directive function to enhance elements\n * @param {Function} fn - Directive implementation\n * @returns {Function} Directive function\n */\nexport function directive(fn) {\n    return (...args) => {\n      return (props = {}) => {\n        const element = document.createElement('div');\n        \n        // Apply the directive to the element\n        fn(element, ...args);\n        \n        // Convert DOM attributes to React props\n        const attributeProps = {};\n        for (let i = 0; i < element.attributes.length; i++) {\n          const attr = element.attributes[i];\n          attributeProps[attr.name] = attr.value;\n        }\n        \n        return {\n          ...props,\n          ...attributeProps\n        };\n      };\n    };\n  }\n  \n  /**\n   * Directive to specify the purpose of an element\n   * @type {Function}\n   */\n  export const aiPurpose = directive((element, purpose) => {\n    element.setAttribute('data-aartisan', 'true');\n    element.setAttribute('data-aartisan-purpose', purpose);\n  });\n  \n  /**\n   * Directive to specify possible interactions\n   * @type {Function}\n   */\n  export const aiInteraction = directive((element, interaction) => {\n    element.setAttribute('data-aartisan', 'true');\n    element.setAttribute('data-aartisan-interaction', interaction);\n  });\n  \n  /**\n   * Directive to add a description for AI understanding\n   * @type {Function}\n   */\n  export const aiDescription = directive((element, description) => {\n    element.setAttribute('data-aartisan', 'true');\n    element.setAttribute('data-aartisan-description', description);\n  });\n  \n  /**\n   * Directive to mark an element as important for AI agents\n   * @type {Function}\n   */\n  export const aiImportant = directive((element, level = 'medium') => {\n    element.setAttribute('data-aartisan', 'true');\n    element.setAttribute('data-aartisan-importance', level);\n  });\n  \n  /**\n   * Directive to specify content type\n   * @type {Function}\n   */\n  export const aiContentType = directive((element, contentType) => {\n    element.setAttribute('data-aartisan', 'true');\n    element.setAttribute('data-aartisan-content-type', contentType);\n  });\n  \n  /**\n   * Directive to group related elements\n   * @type {Function}\n   */\n  export const aiGroup = directive((element, groupId) => {\n    element.setAttribute('data-aartisan', 'true');\n    element.setAttribute('data-aartisan-group', groupId);\n  });","import React, { forwardRef, useId } from 'react';\nimport { useAartisanContext } from './provider.jsx';\nimport { createMetadata } from '../core/metadata.js';\n\n/**\n * Higher-order component to enhance a component with AI metadata\n * @param {Object} options - Enhancement options\n * @param {string} options.name - Component name\n * @param {Object} options.semantics - Semantic metadata\n * @returns {Function} HOC wrapper function\n */\nexport function withAIEnhancement(options = {}) {\n  const { name, semantics = {} } = options;\n  \n  // Create metadata\n  const metadata = createMetadata({\n    name: name || 'EnhancedComponent',\n    purpose: semantics.purpose,\n    interactions: semantics.interactions,\n    semantics\n  });\n  \n  // Return the HOC\n  return (WrappedComponent) => {\n    // Create an enhanced component\n    const EnhancedComponent = forwardRef((props, ref) => {\n      const componentId = useId();\n      const { registerComponent, unregisterComponent } = useAartisanContext();\n      \n      // Register on mount\n      React.useEffect(() => {\n        registerComponent(componentId, {\n          ...metadata,\n          instanceProps: props\n        });\n        \n        return () => {\n          unregisterComponent(componentId);\n        };\n      }, []);\n      \n      // Data attributes for AI understanding\n      const aiProps = {\n        'data-aartisan': true,\n        'data-aartisan-id': componentId,\n        'data-aartisan-name': metadata.name,\n        'data-aartisan-purpose': semantics.purpose || ''\n      };\n      \n      // Render the wrapped component with AI props\n      return <WrappedComponent {...props} {...aiProps} ref={ref} />;\n    });\n    \n    // Add metadata and display name\n    EnhancedComponent.displayName = `withAIEnhancement(${\n      WrappedComponent.displayName || WrappedComponent.name || 'Component'\n    })`;\n    EnhancedComponent.__aartisan = metadata;\n    \n    return EnhancedComponent;\n  };\n}\n\n/**\n * Higher-order component to provide AI context\n * @param {Object} context - AI context data\n * @returns {Function} HOC wrapper function\n */\nexport function withAIContext(context = {}) {\n  return (WrappedComponent) => {\n    // Create a context provider component\n    const WithAIContext = (props) => {\n      const { updateSemanticContext } = useAartisanContext();\n      \n      // Update context on mount\n      React.useEffect(() => {\n        updateSemanticContext(context);\n      }, []);\n      \n      // Render the wrapped component\n      return <WrappedComponent {...props} />;\n    };\n    \n    // Add display name\n    WithAIContext.displayName = `withAIContext(${\n      WrappedComponent.displayName || WrappedComponent.name || 'Component'\n    })`;\n    \n    return WithAIContext;\n  };\n}"],"names":["AartisanContext","createContext","AartisanProvider","children","config","debug","contextValue","setContextValue","useState","semanticContext","createAIContext","enhancedComponents","Map","version","useEffect","prevContext","registerComponent","id","metadata","set","console","log","unregisterComponent","delete","updateSemanticContext","newContext","updated","Date","toISOString","value","React","createElement","Provider","useAartisanContext","context","useContext","Error","defineComponent","name","semantics","props","render","createMetadata","purpose","interactions","EnhancedComponent","forwardRef","ref","componentId","useId","instanceProps","dataAttributes","rendered","isValidElement","cloneElement","displayName","__aartisan","getMetadata","getSemantics","useAIEnhanced","elementRef","useRef","current","aiProps","useAIContext","initialContext","Object","keys","length","updateContext","useAIInteraction","activeInteraction","setActiveInteraction","enhancedInteractions","entries","reduce","acc","handler","args","result","isInteracting","directive","fn","element","document","attributeProps","i","attributes","attr","aiPurpose","setAttribute","aiInteraction","interaction","aiDescription","description","withAIEnhancement","options","WrappedComponent","_extends","withAIContext","WithAIContext"],"mappings":"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"}