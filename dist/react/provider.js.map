{"version":3,"file":"provider.js","sources":["../../src/core/index.js","../../src/react/provider.jsx"],"sourcesContent":["/**\n * aartisan - Core functionality\n */\nimport { createMetadata, getMetadata, enhanceMetadata } from './metadata.js';\n\n// Export metadata system\nexport {\n  createMetadata,\n  getMetadata,\n  enhanceMetadata\n};\n\n/**\n * Creates a semantically enhanced component or element\n * @param {Object} element - The React element or component to enhance\n * @param {Object} semantics - Semantic metadata for the element\n * @returns {Object} Enhanced element\n */\nexport function enhance(element, semantics = {}) {\n  return {\n    ...element,\n    __aartisan: {\n      ...semantics,\n      enhanced: true,\n      version: '0.1.0'\n    }\n  };\n}\n\n/**\n * Checks if an element has been enhanced with aartisan metadata\n * @param {Object} element - Element to check\n * @returns {boolean} Whether the element is enhanced\n */\nexport function isEnhanced(element) {\n  return element && element.__aartisan && element.__aartisan.enhanced === true;\n}\n\n/**\n * Creates a semantic context object for AI agent understanding\n * @param {Object} options - Context options\n * @returns {Object} Semantic context object\n */\nexport function createContext(options = {}) {\n  return {\n    type: 'aartisan-context',\n    version: '0.1.0',\n    timestamp: new Date().toISOString(),\n    ...options\n  };\n}","import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { createContext as createAIContext } from '../core/index.js';\n\n// Create the context\nconst AartisanContext = createContext(null);\n\n/**\n * Provider component for Aartisan functionality\n * @param {Object} props - Component props\n * @param {React.ReactNode} props.children - Child components\n * @param {Object} props.config - Configuration options\n * @param {boolean} props.debug - Enable debug mode\n * @returns {React.ReactElement} Provider component\n */\nexport function AartisanProvider({ \n  children, \n  config = {}, \n  debug = false \n}) {\n  const [contextValue, setContextValue] = useState(() => ({\n    config,\n    debug,\n    semanticContext: createAIContext(config),\n    enhancedComponents: new Map(),\n    version: '0.1.0'\n  }));\n  \n  // Update context if config or debug changes\n  useEffect(() => {\n    setContextValue(prevContext => ({\n      ...prevContext,\n      config,\n      debug,\n      semanticContext: createAIContext(config)\n    }));\n  }, [config, debug]);\n  \n  /**\n   * Registers an enhanced component in the context\n   * @param {string} id - Component ID\n   * @param {Object} metadata - Component metadata\n   */\n  const registerComponent = (id, metadata) => {\n    setContextValue(prevContext => {\n      const enhancedComponents = new Map(prevContext.enhancedComponents);\n      enhancedComponents.set(id, metadata);\n      \n      return {\n        ...prevContext,\n        enhancedComponents\n      };\n    });\n    \n    if (debug) {\n      console.log(`[Aartisan] Registered component: ${id}`, metadata);\n    }\n  };\n  \n  /**\n   * Unregisters a component from the context\n   * @param {string} id - Component ID\n   */\n  const unregisterComponent = (id) => {\n    setContextValue(prevContext => {\n      const enhancedComponents = new Map(prevContext.enhancedComponents);\n      enhancedComponents.delete(id);\n      \n      return {\n        ...prevContext,\n        enhancedComponents\n      };\n    });\n    \n    if (debug) {\n      console.log(`[Aartisan] Unregistered component: ${id}`);\n    }\n  };\n  \n  /**\n   * Updates the semantic context\n   * @param {Object} newContext - New context data\n   */\n  const updateSemanticContext = (newContext) => {\n    setContextValue(prevContext => ({\n      ...prevContext,\n      semanticContext: {\n        ...prevContext.semanticContext,\n        ...newContext,\n        updated: new Date().toISOString()\n      }\n    }));\n  };\n  \n  const value = {\n    ...contextValue,\n    registerComponent,\n    unregisterComponent,\n    updateSemanticContext\n  };\n  \n  return (\n    <AartisanContext.Provider value={value}>\n      {children}\n    </AartisanContext.Provider>\n  );\n}\n\n/**\n * Hook to access the Aartisan context\n * @returns {Object} Aartisan context\n */\nexport function useAartisanContext() {\n  const context = useContext(AartisanContext);\n  if (!context) {\n    throw new Error('useAartisanContext must be used within an AartisanProvider');\n  }\n  return context;\n}"],"names":["createContext","options","type","version","timestamp","Date","toISOString","AartisanContext","AartisanProvider","children","config","debug","contextValue","setContextValue","useState","semanticContext","createAIContext","enhancedComponents","Map","useEffect","prevContext","registerComponent","id","metadata","set","console","log","unregisterComponent","delete","updateSemanticContext","newContext","updated","value","React","createElement","Provider","useAartisanContext","context","useContext","Error"],"mappings":";;AAAA;AACA;AACA;;AAoCA;AACA;AACA;AACA;AACA;AACO,SAASA,aAAaA,CAACC,OAAO,GAAG,EAAE,EAAE;EAC1C,OAAO;AACLC,IAAAA,IAAI,EAAE,kBAAkB;AACxBC,IAAAA,OAAO,EAAE,OAAO;IAChBC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;IACnC,GAAGL;GACJ;AACH;;AC/CA;AACA,MAAMM,eAAe,gBAAGP,eAAa,CAAC,IAAI,CAAC;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASQ,gBAAgBA,CAAC;EAC/BC,QAAQ;EACRC,MAAM,GAAG,EAAE;AACXC,EAAAA,KAAK,GAAG;AACV,CAAC,EAAE;EACD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGC,QAAQ,CAAC,OAAO;IACtDJ,MAAM;IACNC,KAAK;AACLI,IAAAA,eAAe,EAAEC,aAAe,CAACN,MAAM,CAAC;AACxCO,IAAAA,kBAAkB,EAAE,IAAIC,GAAG,EAAE;AAC7Bf,IAAAA,OAAO,EAAE;AACX,GAAC,CAAC,CAAC;;AAEH;AACAgB,EAAAA,SAAS,CAAC,MAAM;IACdN,eAAe,CAACO,WAAW,KAAK;AAC9B,MAAA,GAAGA,WAAW;MACdV,MAAM;MACNC,KAAK;MACLI,eAAe,EAAEC,aAAe,CAACN,MAAM;AACzC,KAAC,CAAC,CAAC;AACL,GAAC,EAAE,CAACA,MAAM,EAAEC,KAAK,CAAC,CAAC;;AAEnB;AACF;AACA;AACA;AACA;AACE,EAAA,MAAMU,iBAAiB,GAAGA,CAACC,EAAE,EAAEC,QAAQ,KAAK;IAC1CV,eAAe,CAACO,WAAW,IAAI;MAC7B,MAAMH,kBAAkB,GAAG,IAAIC,GAAG,CAACE,WAAW,CAACH,kBAAkB,CAAC;AAClEA,MAAAA,kBAAkB,CAACO,GAAG,CAACF,EAAE,EAAEC,QAAQ,CAAC;MAEpC,OAAO;AACL,QAAA,GAAGH,WAAW;AACdH,QAAAA;OACD;AACH,KAAC,CAAC;AAEF,IAAA,IAAIN,KAAK,EAAE;MACTc,OAAO,CAACC,GAAG,CAAC,CAAA,iCAAA,EAAoCJ,EAAE,CAAE,CAAA,EAAEC,QAAQ,CAAC;AACjE;GACD;;AAED;AACF;AACA;AACA;EACE,MAAMI,mBAAmB,GAAIL,EAAE,IAAK;IAClCT,eAAe,CAACO,WAAW,IAAI;MAC7B,MAAMH,kBAAkB,GAAG,IAAIC,GAAG,CAACE,WAAW,CAACH,kBAAkB,CAAC;AAClEA,MAAAA,kBAAkB,CAACW,MAAM,CAACN,EAAE,CAAC;MAE7B,OAAO;AACL,QAAA,GAAGF,WAAW;AACdH,QAAAA;OACD;AACH,KAAC,CAAC;AAEF,IAAA,IAAIN,KAAK,EAAE;AACTc,MAAAA,OAAO,CAACC,GAAG,CAAC,CAAsCJ,mCAAAA,EAAAA,EAAE,EAAE,CAAC;AACzD;GACD;;AAED;AACF;AACA;AACA;EACE,MAAMO,qBAAqB,GAAIC,UAAU,IAAK;IAC5CjB,eAAe,CAACO,WAAW,KAAK;AAC9B,MAAA,GAAGA,WAAW;AACdL,MAAAA,eAAe,EAAE;QACf,GAAGK,WAAW,CAACL,eAAe;AAC9B,QAAA,GAAGe,UAAU;AACbC,QAAAA,OAAO,EAAE,IAAI1B,IAAI,EAAE,CAACC,WAAW;AACjC;AACF,KAAC,CAAC,CAAC;GACJ;AAED,EAAA,MAAM0B,KAAK,GAAG;AACZ,IAAA,GAAGpB,YAAY;IACfS,iBAAiB;IACjBM,mBAAmB;AACnBE,IAAAA;GACD;AAED,EAAA,oBACEI,KAAA,CAAAC,aAAA,CAAC3B,eAAe,CAAC4B,QAAQ,EAAA;AAACH,IAAAA,KAAK,EAAEA;AAAM,GAAA,EACpCvB,QACuB,CAAC;AAE/B;;AAEA;AACA;AACA;AACA;AACO,SAAS2B,kBAAkBA,GAAG;AACnC,EAAA,MAAMC,OAAO,GAAGC,UAAU,CAAC/B,eAAe,CAAC;EAC3C,IAAI,CAAC8B,OAAO,EAAE;AACZ,IAAA,MAAM,IAAIE,KAAK,CAAC,4DAA4D,CAAC;AAC/E;AACA,EAAA,OAAOF,OAAO;AAChB;;;;"}